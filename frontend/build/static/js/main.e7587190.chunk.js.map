{"version":3,"sources":["Components/Authentication/Login.js","Components/Authentication/Register.js","Pages/Homepage.js","Context/ChatProvider.js","config/ChatLogics.js","Components/Miscellaneous/ProfileModal.js","Components/UserAvatar/UserBadgeItem.js","Components/UserAvatar/UserListItem.js","Components/Miscellaneous/UpdateGroupChatModal.js","Components/ScrollableChat.js","Components/SingleChat.js","Components/ChatBox.js","Components/ChatLoading.js","Components/Miscellaneous/GroupChatModal.js","Components/MyChats.js","Components/Miscellaneous/SideDrawer.js","Pages/ChatPage.js","App.js","index.js"],"names":["Login","_useState","useState","_useState2","Object","slicedToArray","email","setemail","_useState3","_useState4","password","setPassword","_useState5","_useState6","showPass","setShowPass","_useState7","_useState8","loading","setLoading","toast","useToast","navigate","useNavigate","handleSubmit","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","config","_yield$axios$post","data","wrap","_context","prev","next","title","status","duration","isClosable","position","abrupt","headers","Content-type","axios","post","sent","localStorage","setItem","JSON","stringify","t0","description","response","message","stop","apply","this","arguments","react_default","a","createElement","chakra_ui_layout_esm","spacing","chakra_ui_form_control_esm","chakra_ui_input_esm","placeholder","value","onChange","e","target","id","isRequired","type","width","chakra_ui_button_esm","h","size","onClick","colorScheme","color","style","marginTop","isLoading","Signup","show","setShow","handleClick","name","setName","setEmail","confirmpassword","setConfirmpassword","_useState9","_useState10","_useState11","_useState12","pic","setPic","_useState13","_useState14","picLoading","setPicLoading","submitHandler","Register_regeneratorRuntime","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","useEffect","parse","getItem","maxW","centerContent","display","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","chakra_ui_tabs_esm","variant","Authentication_Login","Register","require","createContext","useContext","ChatContext","ChatState","ChatProvider","children","userInfo","setUserInfo","selectedChat","setSelectedChat","chats","setChats","notification","setNotification","Provider","getSender","loggedUser","users","_id","isSameUser","messages","i","sender","isSameSenderMargin","userId","length","ProfileModal","user","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","Fragment","base","icon","chakra_ui_icons_esm","chakra_ui_modal_esm","isCentered","flexDir","alignItems","chakra_ui_image_esm","boxSize","src","alt","md","UserBadgeItem","handleFunction","admin","px","py","mb","cursor","overflow","pl","UserListItem","_hover","background","chakra_ui_avatar_esm","mr","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","renameLoading","setRenameLoading","_ChatState","handleRemove","_ref2","UpdateGroupChatModal_regeneratorRuntime","u","_yield$axios$patch","groupAdmin","Authorization","concat","token","patch","chatId","_x","handleAddUser","_ref3","_callee2","_yield$axios$patch2","_context2","find","toConsumableArray","_x2","handleRename","_ref4","_callee3","_yield$axios$patch3","_context3","chatName","_x3","handleSearch","_ref5","_callee4","query","_yield$axios$get","_context4","get","_x4","flexWrap","pb","map","UserAvatar_UserBadgeItem","key","ml","chakra_ui_spinner_esm","UserAvatar_UserListItem","ScrollableChat","index_es","index","isSameSender","isLastMessage","chakra_ui_tooltip_esm","label","placement","hasArrow","mt","backgroundColor","padding","maxWidth","marginLeft","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","io","emit","on","newMessageReceived","chat","createdAt","includes","sendMessage","SingleChat_regeneratorRuntime","Content-Type","backgroundLoad","typingHandler","lastTypingTime","Date","getTime","setTimeout","isGroupChat","toUpperCase","Miscellaneous_UpdateGroupChatModal","Miscellaneous_ProfileModal","overflowY","alignSelf","margin","className","Components_ScrollableChat","onKeyDown","ChatBox","Components_SingleChat","ChatLoading","chakra_ui_skeleton_esm","height","GroupChatModal","GroupChatModal_regeneratorRuntime","userToDelete","filter","slice","userToAdd","MyChats","setLoggedUser","MyChats_regeneratorRuntime","fetchChats","Miscellaneous_GroupChatModal","lg","rightIcon","flexDirection","Components_ChatLoading","SideDrawer","_React$useState","React","_React$useState2","_React$useState3","_React$useState4","_React$useState5","_React$useState6","_React$useState7","_React$useState8","loadingChat","setLoadingChat","userData","SideDrawer_regeneratorRuntime","accessChat","fontWeight","chakra_ui_menu_esm","notif","n","as","Button","removeItem","borderBottomWidth","ChatPage","Miscellaneous_SideDrawer","Components_MyChats","Components_ChatBox","App","react_router","path","element","Pages_Homepage","Pages_ChatPage","ReactDOM","createRoot","document","getElementById","render","chakra_ui_react_esm","react_router_dom","Context_ChatProvider","src_App"],"mappings":"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","file":"static/js/main.e7587190.chunk.js","sourcesContent":["import {\r\n    Button,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    InputGroup,\r\n    InputRightElement,\r\n    useToast,\r\n    VStack,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n    const [email, setemail] = useState();\r\n    const [password, setPassword] = useState();\r\n    const [showPass, setShowPass] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const toast = useToast();\r\n    const navigate = useNavigate();\r\n\r\n    const handleShowPass = () => {\r\n        setShowPass(!showPass);\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        setLoading(true);\r\n        if (!email || !password) {\r\n            setLoading(false);\r\n            toast({\r\n                title: \"Please Fill all the Fields\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                },\r\n            };\r\n            const { data } = await axios.post(\r\n                \"/api/user/login\",\r\n                {\r\n                    email,\r\n                    password,\r\n                },\r\n                config\r\n            );\r\n            toast({\r\n                title: \"Login Successful\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n\r\n            localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n            setLoading(false);\r\n            navigate(\"/chats\");\r\n        } catch (error) {\r\n            setLoading(false);\r\n            toast({\r\n                title: \"Invalid Credentials\",\r\n                status: \"error\",\r\n                description: error.response.data.message,\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <VStack spacing=\"5px\">\r\n            <FormControl>\r\n                <FormLabel>email</FormLabel>\r\n                <Input\r\n                    placeholder=\"Enter your email\"\r\n                    value={email || \"\"}\r\n                    onChange={(e) => setemail(e.target.value)}\r\n                />\r\n            </FormControl>\r\n            <FormControl id=\"password\" isRequired>\r\n                <FormLabel>Password</FormLabel>\r\n                <InputGroup>\r\n                    <Input\r\n                        type={showPass ? \"text\" : \"password\"}\r\n                        placeholder=\"Enter your password\"\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        value={password || \"\"}\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleShowPass}>\r\n                            {showPass ? \"Hide\" : \"Show\"}\r\n                        </Button>\r\n                    </InputRightElement>\r\n                </InputGroup>\r\n            </FormControl>\r\n            <Button\r\n                colorScheme=\"blue\"\r\n                width=\"100%\"\r\n                color=\"white\"\r\n                onClick={handleSubmit}\r\n                style={{ marginTop: 15 }}\r\n                isLoading={loading}\r\n            >\r\n                Login\r\n            </Button>\r\n            <Button\r\n                colorScheme=\"red\"\r\n                width=\"100%\"\r\n                color=\"white\"\r\n                onClick={() => {\r\n                    setemail(\"Guest\");\r\n                    setPassword(\"12guest34\");\r\n                    handleSubmit();\r\n                }}\r\n                style={{ marginTop: 15 }}\r\n            >\r\n                Chat as a Guest\r\n            </Button>\r\n        </VStack>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport React from \"react\";\r\n\r\nconst Signup = () => {\r\n    const [show, setShow] = useState(false);\r\n    const handleClick = () => setShow(!show);\r\n    const toast = useToast();\r\n    const navigate = useNavigate();\r\n\r\n    const [name, setName] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [confirmpassword, setConfirmpassword] = useState();\r\n    const [password, setPassword] = useState();\r\n    const [pic, setPic] = useState();\r\n    const [picLoading, setPicLoading] = useState(false);\r\n\r\n    const submitHandler = async () => {\r\n        setPicLoading(true);\r\n        if (!name || !email || !password || !confirmpassword) {\r\n            toast({\r\n                title: \"Please Fill all the Feilds\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            setPicLoading(false);\r\n            return;\r\n        }\r\n        if (password !== confirmpassword) {\r\n            toast({\r\n                title: \"Passwords Do Not Match\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            return;\r\n        }\r\n        console.log(name, email, password, pic);\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                },\r\n            };\r\n            const { data } = await axios.post(\r\n                \"/api/user\",\r\n                {\r\n                    name,\r\n                    email,\r\n                    password,\r\n                    pic,\r\n                },\r\n                config\r\n            );\r\n            console.log(data);\r\n            toast({\r\n                title: \"Registration Successful\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n            setPicLoading(false);\r\n            navigate(\"/chats\");\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Occured!\",\r\n                description: error.response.data.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            setPicLoading(false);\r\n        }\r\n    };\r\n\r\n    const postDetails = (pics) => {\r\n        setPicLoading(true);\r\n        if (pics === undefined) {\r\n            toast({\r\n                title: \"Please Select an Image!\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            return;\r\n        }\r\n        console.log(pics);\r\n        if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n            const data = new FormData();\r\n            data.append(\"file\", pics);\r\n            data.append(\"upload_preset\", \"MERN_CHAT\");\r\n            data.append(\"cloud_name\", \"dic2ofaqk\");\r\n            fetch(\"https://api.cloudinary.com/v1_1/dic2ofaqk/image/upload\", {\r\n                method: \"post\",\r\n                body: data,\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    setPic(data.url.toString());\r\n                    console.log(data.url.toString());\r\n                    setPicLoading(false);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    setPicLoading(false);\r\n                });\r\n        } else {\r\n            toast({\r\n                title: \"Please Select an Image!\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            setPicLoading(false);\r\n            return;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <VStack spacing=\"5px\">\r\n            <FormControl id=\"first-name\" isRequired>\r\n                <FormLabel>Name</FormLabel>\r\n                <Input\r\n                    placeholder=\"Enter Your Name\"\r\n                    onChange={(e) => setName(e.target.value)}\r\n                />\r\n            </FormControl>\r\n            <FormControl id=\"email\" isRequired>\r\n                <FormLabel>Email Address</FormLabel>\r\n                <Input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Your Email Address\"\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n            </FormControl>\r\n            <FormControl id=\"password\" isRequired>\r\n                <FormLabel>Password</FormLabel>\r\n                <InputGroup size=\"md\">\r\n                    <Input\r\n                        type={show ? \"text\" : \"password\"}\r\n                        placeholder=\"Enter Password\"\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                            {show ? \"Hide\" : \"Show\"}\r\n                        </Button>\r\n                    </InputRightElement>\r\n                </InputGroup>\r\n            </FormControl>\r\n            <FormControl id=\"password\" isRequired>\r\n                <FormLabel>Confirm Password</FormLabel>\r\n                <InputGroup size=\"md\">\r\n                    <Input\r\n                        type={show ? \"text\" : \"password\"}\r\n                        placeholder=\"Confirm password\"\r\n                        onChange={(e) => setConfirmpassword(e.target.value)}\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n                            {show ? \"Hide\" : \"Show\"}\r\n                        </Button>\r\n                    </InputRightElement>\r\n                </InputGroup>\r\n            </FormControl>\r\n            <FormControl id=\"pic\">\r\n                <FormLabel>Upload your Picture</FormLabel>\r\n                <Input\r\n                    type=\"file\"\r\n                    p={1.5}\r\n                    accept=\"image/*\"\r\n                    onChange={(e) => postDetails(e.target.files[0])}\r\n                />\r\n            </FormControl>\r\n            <Button\r\n                colorScheme=\"blue\"\r\n                width=\"100%\"\r\n                style={{ marginTop: 15 }}\r\n                onClick={submitHandler}\r\n                isLoading={picLoading}\r\n            >\r\n                Sign Up\r\n            </Button>\r\n        </VStack>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n    Box,\r\n    Container,\r\n    Tab,\r\n    TabList,\r\n    TabPanel,\r\n    TabPanels,\r\n    Tabs,\r\n    Text,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Login from \"../Components/Authentication/Login\";\r\nimport Register from \"../Components/Authentication/Register\";\r\n\r\nconst Homepage = () => {\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n        if (user) {\r\n            navigate(\"/chats\");\r\n        }\r\n    }, [navigate]);\r\n\r\n    return (\r\n        <Container maxW=\"xl\" centerContent>\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                p={3}\r\n                bg={\"white\"}\r\n                w=\"100%\"\r\n                m=\"40px 0 15px 0\"\r\n                borderRadius=\"lg\"\r\n                borderWidth=\"1px\"\r\n            >\r\n                <Text fontSize=\"4xl\" fontFamily={\"work sans\"} color=\"black\">\r\n                    Welcome to the chat app!\r\n                </Text>\r\n            </Box>\r\n            <Box\r\n                p={4}\r\n                bg={\"white\"}\r\n                w=\"100%\"\r\n                borderRadius=\"lg\"\r\n                borderWidth=\"1px\"\r\n            >\r\n                <Tabs variant=\"soft-rounded\" colorScheme=\"blue\">\r\n                    <TabList>\r\n                        <Tab width=\"50%\">Login</Tab>\r\n                        <Tab width=\"50%\">Register</Tab>\r\n                    </TabList>\r\n                    <TabPanels>\r\n                        <TabPanel>\r\n                            <Login />\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <Register />\r\n                        </TabPanel>\r\n                    </TabPanels>\r\n                </Tabs>\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Homepage;\r\n","import { useNavigate } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst { createContext, useContext, useState, useEffect } = require(\"react\");\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n    const [userInfo, setUserInfo] = useState();\r\n    const [selectedChat, setSelectedChat] = useState();\r\n    const [chats, setChats] = useState([]);\r\n    const [notification, setNotification] = useState([]);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        setUserInfo(userInfo);\r\n\r\n        if (!userInfo) {\r\n            navigate(\"/\");\r\n        }\r\n    }, [navigate]);\r\n\r\n    return (\r\n        <ChatContext.Provider\r\n            value={{\r\n                userInfo,\r\n                setUserInfo,\r\n                selectedChat,\r\n                setSelectedChat,\r\n                chats,\r\n                setChats,\r\n                notification,\r\n                setNotification,\r\n            }}\r\n        >\r\n            {children}\r\n        </ChatContext.Provider>\r\n    );\r\n};\r\n\r\nexport const ChatState = () => {\r\n    return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","export const getSender = (loggedUser, users) => {\r\n    // console.log(loggedUser, users);\r\n    if (loggedUser) {\r\n        return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n    } else {\r\n        console.log(\"GODHASFORSAKENYOU\");\r\n        return \"GODHASFORSAKENYOU\";\r\n    }\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n    // console.log(loggedUser, users);\r\n    if (loggedUser) {\r\n        return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n    } else {\r\n        return \"THEDEVILHASFORSAKENYOU\";\r\n    }\r\n};\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n    return (\r\n        i < messages.length - 1 &&\r\n        (messages[i + 1].sender._id !== m.sender._id ||\r\n            messages[i + 1].sender._id === undefined) &&\r\n        messages[i].sender._id !== userId\r\n    );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n    return (\r\n        i === messages.length - 1 &&\r\n        messages[messages.length - 1].sender._id !== userId &&\r\n        messages[messages.length - 1].sender._id\r\n    );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n    return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n    // console.log(i === messages.length - 1);\r\n\r\n    if (\r\n        i < messages.length - 1 &&\r\n        messages[i + 1].sender._id === m.sender._id &&\r\n        messages[i].sender._id !== userId\r\n    )\r\n        return 33;\r\n    else if (\r\n        (i < messages.length - 1 &&\r\n            messages[i + 1].sender._id !== m.sender._id &&\r\n            messages[i].sender._id !== userId) ||\r\n        (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n    )\r\n        return 0;\r\n    else return \"auto\";\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    useDisclosure,\r\n    IconButton,\r\n    Text,\r\n    Image,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n    return (\r\n        <>\r\n            {children ? (\r\n                <span onClick={onOpen}>{children}</span>\r\n            ) : (\r\n                <IconButton\r\n                    display={{ base: \"flex\" }}\r\n                    icon={<ViewIcon />}\r\n                    onClick={onOpen}\r\n                />\r\n            )}\r\n            <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent h=\"410px\">\r\n                    <ModalHeader\r\n                        fontSize=\"40px\"\r\n                        fontFamily=\"Work sans\"\r\n                        display=\"flex\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        {user.name}\r\n                    </ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody\r\n                        display=\"flex\"\r\n                        flexDir=\"column\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"space-between\"\r\n                    >\r\n                        <Image\r\n                            borderRadius=\"full\"\r\n                            boxSize=\"150px\"\r\n                            src={user.pic}\r\n                            alt={user.name}\r\n                        />\r\n                        <Text\r\n                            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n                            fontFamily=\"Work sans\"\r\n                        >\r\n                            Email: {user.email}\r\n                        </Text>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={onClose}>Close</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport React from \"react\";\r\n\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n    return (\r\n        <Badge\r\n            px={2}\r\n            py={1}\r\n            borderRadius=\"lg\"\r\n            m={1}\r\n            mb={2}\r\n            variant=\"solid\"\r\n            fontSize={12}\r\n            colorScheme=\"purple\"\r\n            cursor=\"pointer\"\r\n            onClick={handleFunction}\r\n            overflow=\"hidden\"\r\n        >\r\n            {user.name}\r\n            {admin === user._id && <span> (Admin)</span>}\r\n            <CloseIcon pl={1} />\r\n        </Badge>\r\n    );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar, Box, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n    return (\r\n        <Box\r\n            onClick={handleFunction}\r\n            cursor=\"pointer\"\r\n            bg=\"#E8E8E8\"\r\n            _hover={{\r\n                background: \"#38B2AC\",\r\n                color: \"white\",\r\n            }}\r\n            w=\"100%\"\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            color=\"black\"\r\n            px={3}\r\n            py={2}\r\n            mb={2}\r\n            borderRadius=\"lg\"\r\n        >\r\n            <Avatar\r\n                mr={2}\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n            />\r\n            <Box overflow={\"hidden\"}>\r\n                <Text>{user.name}</Text>\r\n                <Text fontSize={\"xs\"}>\r\n                    <b>Email: </b>\r\n                    {user.email}\r\n                </Text>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    IconButton,\r\n    Input,\r\n    Modal,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay,\r\n    Spinner,\r\n    useDisclosure,\r\n    useToast,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [groupChatName, setGroupChatName] = useState();\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [renameLoading, setRenameLoading] = useState(false);\r\n\r\n    const toast = useToast();\r\n\r\n    const { selectedChat, setSelectedChat, userInfo } = ChatState();\r\n\r\n    const handleRemove = async (u) => {\r\n        console.log(userInfo);\r\n        if (\r\n            selectedChat.groupAdmin._id !== userInfo.data.user._id &&\r\n            u._id !== userInfo.data.user._id\r\n        ) {\r\n            toast({\r\n                title: \"Error Ocurred!\",\r\n                description: \"You are not allowed to remove users\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n            });\r\n            return;\r\n        }\r\n        try {\r\n            setLoading(true);\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.patch(\r\n                `/api/chat/groupremove`,\r\n                {\r\n                    chatId: selectedChat._id,\r\n                    userId: u._id,\r\n                },\r\n                config\r\n            );\r\n\r\n            u._id === userInfo.data.user._id\r\n                ? setSelectedChat()\r\n                : setSelectedChat(data);\r\n            setLoading(false);\r\n            setFetchAgain(!fetchAgain);\r\n            fetchMessages();\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Ocurred!\",\r\n                description: \"Failed to remove user\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAddUser = async (u) => {\r\n        if (selectedChat.users.find((user) => user._id === u._id)) {\r\n            toast({\r\n                title: \"User Already in Group!\",\r\n                description: \"User Already Added to this Group Chat\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (selectedChat.groupAdmin._id === userInfo.data.user._id) {\r\n            setSelectedUsers([...selectedUsers, u]);\r\n        }\r\n\r\n        try {\r\n            setLoading(true);\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.patch(\r\n                `/api/chat/groupadd`,\r\n                {\r\n                    chatId: selectedChat._id,\r\n                    userId: u._id,\r\n                },\r\n                config\r\n            );\r\n\r\n            setSelectedChat(data);\r\n            setFetchAgain(!fetchAgain);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            toast({\r\n                title: \"Error Ocurred!\",\r\n                description: \"Failed to Add User to Group\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRename = async (u) => {\r\n        if (!groupChatName) {\r\n            return;\r\n        }\r\n        try {\r\n            setRenameLoading(true);\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.patch(\r\n                `/api/chat/rename`,\r\n                {\r\n                    chatId: selectedChat._id,\r\n                    chatName: groupChatName,\r\n                },\r\n                config\r\n            );\r\n            setRenameLoading(false);\r\n            setSelectedChat(data);\r\n            setFetchAgain(!fetchAgain);\r\n            // onClose();\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Ocurred!\",\r\n                description: \"Failed to Rename Group Chat\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n            });\r\n            setRenameLoading(false);\r\n        }\r\n\r\n        setGroupChatName(\"\");\r\n    };\r\n\r\n    const handleSearch = async (query) => {\r\n        setSearch(query);\r\n        if (!query) {\r\n            return;\r\n        }\r\n        try {\r\n            setLoading(true);\r\n\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.get(\r\n                `/api/user?search=${search}`,\r\n                config\r\n            );\r\n            // console.log(data);\r\n            setLoading(false);\r\n            setSearchResult(data);\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Ocurred!\",\r\n                description: \"Failed to Load Search Results\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <IconButton\r\n                display={{ base: \"flex\" }}\r\n                icon={<ViewIcon />}\r\n                onClick={onOpen}\r\n            />\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader\r\n                        fontSize=\"35px\"\r\n                        fontFamily=\"Work sans\"\r\n                        display=\"flex\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        {selectedChat.chatName}\r\n                    </ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Box display=\"flex\" w={\"100%\"} flexWrap=\"wrap\" pb={3}>\r\n                            {selectedChat.users.map((u) => (\r\n                                <UserBadgeItem\r\n                                    key={u._id}\r\n                                    user={u}\r\n                                    handleFunction={() => handleRemove(u)}\r\n                                />\r\n                            ))}\r\n                        </Box>\r\n                        <FormControl display=\"flex\">\r\n                            <Input\r\n                                placeholder=\"Chat Name\"\r\n                                mb={3}\r\n                                onChange={(e) =>\r\n                                    setGroupChatName(e.target.value)\r\n                                }\r\n                            />\r\n                            <Button\r\n                                variant=\"solid\"\r\n                                colorScheme=\"teal\"\r\n                                isLoading={renameLoading}\r\n                                onClick={handleRename}\r\n                                ml={1}\r\n                            >\r\n                                Update\r\n                            </Button>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <Input\r\n                                placeholder=\"Add Users eg. Peter, Paul, Mary\"\r\n                                mb={1}\r\n                                onChange={(e) => handleSearch(e.target.value)}\r\n                            />\r\n                        </FormControl>\r\n                        {loading ? (\r\n                            <Spinner size=\"lg\" />\r\n                        ) : searchResult ? (\r\n                            searchResult.map((u) => (\r\n                                <UserListItem\r\n                                    key={u._id}\r\n                                    user={u}\r\n                                    handleFunction={() => handleAddUser(u)}\r\n                                />\r\n                            ))\r\n                        ) : null}\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button\r\n                            onClick={() => handleRemove(userInfo.data.user)}\r\n                            colorScheme=\"red\"\r\n                        >\r\n                            Leave Group\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Avatar, Tooltip } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n    isLastMessage,\r\n    isSameSender,\r\n    isSameSenderMargin,\r\n    isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n    const { userInfo } = ChatState();\r\n\r\n    return (\r\n        <ScrollableFeed>\r\n            {messages &&\r\n                messages.map((message, index) => (\r\n                    <div key={message._id} style={{ display: \"flex\" }}>\r\n                        {(isSameSender(\r\n                            messages,\r\n                            message,\r\n                            index,\r\n                            userInfo.data.user._id\r\n                        ) ||\r\n                            isLastMessage(\r\n                                messages,\r\n                                index,\r\n                                userInfo.data.user._id\r\n                            )) && (\r\n                            <Tooltip\r\n                                label={message.sender.name}\r\n                                placement=\"bottom-start\"\r\n                                hasArrow\r\n                            >\r\n                                <Avatar\r\n                                    mt=\"7px\"\r\n                                    mr={1}\r\n                                    size=\"sm\"\r\n                                    cursor=\"pointer\"\r\n                                    name={message.sender.name}\r\n                                    src={message.sender.pic}\r\n                                />\r\n                            </Tooltip>\r\n                        )}\r\n                        <span\r\n                            style={{\r\n                                backgroundColor: `${\r\n                                    message.sender._id ===\r\n                                    userInfo.data.user._id\r\n                                        ? \"#BEE3F8\"\r\n                                        : \"#B9F5D0\"\r\n                                }`,\r\n                                borderRadius: \"20px\",\r\n                                padding: \"5px 15px\",\r\n                                maxWidth: \"75%\",\r\n                                marginLeft: isSameSenderMargin(\r\n                                    messages,\r\n                                    message,\r\n                                    index,\r\n                                    userInfo.data.user._id\r\n                                ),\r\n                                marginTop: isSameUser(\r\n                                    messages,\r\n                                    message,\r\n                                    index,\r\n                                    userInfo.data.user._id\r\n                                )\r\n                                    ? 3\r\n                                    : 10,\r\n                            }}\r\n                        >\r\n                            {message.message}\r\n                        </span>\r\n                    </div>\r\n                ))}\r\n        </ScrollableFeed>\r\n    );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n    Box,\r\n    FormControl,\r\n    IconButton,\r\n    Input,\r\n    Spinner,\r\n    Text,\r\n    useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport ProfileModal from \"./Miscellaneous/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./Miscellaneous/UpdateGroupChatModal\";\r\nimport axios from \"axios\";\r\nimport \"./styles.css\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport io from \"socket.io-client\";\r\n// import Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nconst ENDPOINT =\r\n    process.env.NODE_ENV === \"production\"\r\n        ? \"https://hay-boi.herokuapp.com/\"\r\n        : \"http://localhost:5000/\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n    const {\r\n        userInfo,\r\n        selectedChat,\r\n        setSelectedChat,\r\n        notification,\r\n        setNotification,\r\n    } = ChatState();\r\n    const user = userInfo ? userInfo.data.user : null;\r\n\r\n    const [messages, setMessages] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [newMessage, setNewMessage] = useState();\r\n    const [socketConnected, setSocketConnected] = useState(false);\r\n    const [typing, setTyping] = useState(false);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n\r\n    const toast = useToast();\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: animationData,\r\n        rendererSettings: {\r\n            preserveAspectRatio: \"xMidYMid slice\",\r\n        },\r\n    };\r\n\r\n    useEffect(() => {\r\n        socket = io(ENDPOINT);\r\n        socket.emit(\"setup\", userInfo.data.user);\r\n        socket.on(\"connected\", () => {\r\n            setSocketConnected(true);\r\n        });\r\n\r\n        socket.on(\"typing\", () => setIsTyping(true));\r\n        socket.on(\"stop typing\", () => setIsTyping(false));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedChatCompare && selectedChatCompare !== selectedChat) {\r\n            fetchMessages(false);\r\n        } else {\r\n            selectedChatCompare = selectedChat;\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [selectedChat]);\r\n\r\n    useEffect(() => {\r\n        socket.on(\"message received\", (newMessageReceived) => {\r\n            if (\r\n                !selectedChatCompare ||\r\n                selectedChatCompare._id !== newMessageReceived.chat._id\r\n            ) {\r\n                if (!notification.includes(newMessageReceived)) {\r\n                    setNotification([newMessageReceived, ...notification]);\r\n                    setFetchAgain(!fetchAgain);\r\n                    console.log(\r\n                        `New Message Received in other chat from User: ${newMessageReceived.sender._id}`\r\n                    );\r\n                }\r\n            } else {\r\n                console.log(\r\n                    `${newMessageReceived.createdAt}: ${newMessageReceived.sender.name} has sent message: ${newMessageReceived.message}`\r\n                );\r\n                setMessages([...messages, newMessageReceived]);\r\n            }\r\n        });\r\n    });\r\n\r\n    const sendMessage = async (e) => {\r\n        if (e.key === \"Enter\" && newMessage) {\r\n            setTyping(false);\r\n            socket.emit(\"stop typing\", selectedChat._id);\r\n            try {\r\n                setLoading(true);\r\n                const config = {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${userInfo.token}`,\r\n                    },\r\n                };\r\n                const { data } = await axios.post(\r\n                    \"/api/message\",\r\n                    {\r\n                        chatId: selectedChat._id,\r\n                        message: newMessage,\r\n                    },\r\n                    config\r\n                );\r\n                console.log(`Message Sent: ${data.message}`);\r\n                socket.emit(\"new message\", data);\r\n                setMessages([...messages, data]);\r\n                setNewMessage(\"\");\r\n                setLoading(false);\r\n\r\n                socket.emit(\"join chat\", selectedChat._id);\r\n            } catch (error) {\r\n                toast({\r\n                    title: \"Error Ocurred!\",\r\n                    description: \"Failed to send Message\",\r\n                    status: \"error\",\r\n                    duration: 5000,\r\n                    isClosable: true,\r\n                    position: \"bottom\",\r\n                });\r\n            }\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchMessages = async (backgroundLoad) => {\r\n        if (!selectedChat) return;\r\n        console.log(\"Fetching Messages\");\r\n        try {\r\n            if (!backgroundLoad) setLoading(true);\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.get(\r\n                `/api/message/${selectedChat._id}`,\r\n                config\r\n            );\r\n            console.log(data);\r\n            setMessages(data);\r\n            setLoading(false);\r\n\r\n            socket.emit(\"join chat\", selectedChat._id);\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Load Messages\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n\r\n    const typingHandler = async (e) => {\r\n        setNewMessage(e.target.value);\r\n\r\n        if (!socketConnected) return;\r\n        if (!typing) {\r\n            setTyping(true);\r\n            socket.emit(\"typing\", selectedChat._id);\r\n        }\r\n\r\n        let lastTypingTime = new Date().getTime();\r\n        var timerLength = 3000;\r\n        setTimeout(() => {\r\n            var timeNow = new Date().getTime();\r\n            var timeDiff = timeNow - lastTypingTime;\r\n            if (timeDiff >= timerLength) {\r\n                setTyping(false);\r\n                socket.emit(\"stop typing\", selectedChat._id);\r\n            }\r\n        }, timerLength);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {selectedChat ? (\r\n                <>\r\n                    <Text\r\n                        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n                        pb={3}\r\n                        px={2}\r\n                        fontFamily=\"Work sans\"\r\n                        display=\"flex\"\r\n                        w=\"100%\"\r\n                        justifyContent={{ base: \"space-between\" }}\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <IconButton\r\n                            display={{ base: \"flex\", md: \"none\" }}\r\n                            icon={<ArrowBackIcon />}\r\n                            onClick={() => setSelectedChat(\"\")}\r\n                        />\r\n                        {messages &&\r\n                            (!selectedChat.isGroupChat ? (\r\n                                <>\r\n                                    {getSender(user, selectedChat.users)}\r\n                                    <ProfileModal\r\n                                        user={getSenderFull(\r\n                                            user,\r\n                                            selectedChat.users\r\n                                        )}\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {selectedChat.chatName.toUpperCase()}\r\n                                    <UpdateGroupChatModal\r\n                                        fetchMessages={fetchMessages}\r\n                                        fetchAgain={fetchAgain}\r\n                                        setFetchAgain={setFetchAgain}\r\n                                    />\r\n                                </>\r\n                            ))}\r\n                    </Text>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        flexDir=\"column\"\r\n                        justifyContent={\"flex-end\"}\r\n                        p={3}\r\n                        w=\"100%\"\r\n                        h=\"100%\"\r\n                        bg=\"#E8E8E8\"\r\n                        borderRadius=\"lg\"\r\n                        overflowY=\"hidden\"\r\n                    >\r\n                        {loading ? (\r\n                            <Spinner\r\n                                size=\"xl\"\r\n                                w={20}\r\n                                h={20}\r\n                                alignSelf=\"center\"\r\n                                margin=\"auto\"\r\n                            />\r\n                        ) : (\r\n                            <div className=\"messages\">\r\n                                <ScrollableChat messages={messages} />\r\n                            </div>\r\n                        )}\r\n                        <FormControl\r\n                            onKeyDown={(e) =>\r\n                                e.key === \"Enter\" ? sendMessage(e) : null\r\n                            }\r\n                            isRequired\r\n                            mt={3}\r\n                        >\r\n                            {isTyping ? (\r\n                                <div>\r\n                                    Typing....\r\n                                    {/* <Lottie\r\n                                        options={defaultOptions}\r\n                                        style={{\r\n                                            marginBottom: 15,\r\n                                            marginLeft: 0,\r\n                                        }}\r\n                                        width={70}\r\n                                    /> */}\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            )}\r\n                            <Input\r\n                                placeholder=\"Type a message...\"\r\n                                onChange={(e) => typingHandler(e)}\r\n                                variant=\"filled\"\r\n                                bg=\"#E0E0E0\"\r\n                            />\r\n                        </FormControl>\r\n                    </Box>\r\n                </>\r\n            ) : (\r\n                <Box\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    h=\"100%\"\r\n                >\r\n                    <Text fontSize={\"3xl\"} pb={3} fontFamily=\"Work sans\">\r\n                        Click on a User to Start a Chat\r\n                    </Text>\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport SingleChat from \"./SingleChat\";\r\n\r\nconst ChatBox = ({ fetchAgain, setFetchAgain }) => {\r\n    const { selectedChat } = ChatState();\r\n\r\n    return (\r\n        <Box\r\n            display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n            alignItems=\"center\"\r\n            flexDir=\"column\"\r\n            bg=\"white\"\r\n            p={3}\r\n            w={{ base: \"100%\", md: \"68%\" }}\r\n            borderRadius=\"lg\"\r\n            borderWidth=\"1px\"\r\n        >\r\n            <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ChatBox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\nimport React from \"react\";\r\n\r\nconst ChatLoading = () => {\r\n    return (\r\n        <Stack>\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    Input,\r\n    Modal,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay,\r\n    Spinner,\r\n    useDisclosure,\r\n    useToast,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [groupChatName, setGroupChatName] = useState();\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const toast = useToast();\r\n\r\n    const { userInfo, chats, setChats } = ChatState();\r\n\r\n    const handleSearch = async (query) => {\r\n        setSearch(query);\r\n        if (!query) {\r\n            return;\r\n        }\r\n        try {\r\n            setLoading(true);\r\n\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.get(\r\n                `/api/user?search=${search}`,\r\n                config\r\n            );\r\n            // console.log(data);\r\n            setLoading(false);\r\n            setSearchResult(data);\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Ocurred!\",\r\n                description: \"Failed to Load Search Results\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n    const handleGroup = (userToAdd) => {\r\n        if (selectedUsers.includes(userToAdd)) {\r\n            toast({\r\n                title: \"User Already Added\",\r\n                description: \"User Already Added\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            return;\r\n        }\r\n        setSelectedUsers([...selectedUsers, userToAdd]);\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (!groupChatName || !selectedUsers) {\r\n            toast({\r\n                title: \"Please enter a group name and select users\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.post(\r\n                \"/api/chat/group\",\r\n                {\r\n                    chatName: groupChatName,\r\n                    users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n                },\r\n                config\r\n            );\r\n\r\n            setChats([data, ...chats]);\r\n            onClose();\r\n            toast({\r\n                title: \"New Group Chat Created Successfully\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Create Group Chat\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleDelete = (userToDelete) => {\r\n        setSelectedUsers(\r\n            selectedUsers.filter((user) => user._id !== userToDelete._id)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span onClick={onOpen}>{children}</span>\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader\r\n                        fontSize={\"35px\"}\r\n                        fontFamily={\"Work sans\"}\r\n                        display={\"flex\"}\r\n                        justifyContent={\"center\"}\r\n                    >\r\n                        Create Group Chat\r\n                    </ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody\r\n                        display={\"flex\"}\r\n                        flexDir={\"column\"}\r\n                        alignItems={\"center\"}\r\n                    >\r\n                        <FormControl>\r\n                            <Input\r\n                                placeholder=\"Chat Name\"\r\n                                mb={3}\r\n                                onChange={(e) =>\r\n                                    setGroupChatName(e.target.value)\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <Input\r\n                                placeholder=\"Add Users eg. Peter, Paul, Mary\"\r\n                                mb={1}\r\n                                onChange={(e) => handleSearch(e.target.value)}\r\n                            />\r\n                        </FormControl>\r\n                        <Box w=\"100%\" display={\"flex\"} flexWrap={\"wrap\"}>\r\n                            {selectedUsers.map((u) => (\r\n                                // console.log(u),\r\n                                <UserBadgeItem\r\n                                    key={u._id}\r\n                                    user={u}\r\n                                    handleFunction={() => handleDelete(u)}\r\n                                />\r\n                            ))}\r\n                        </Box>\r\n\r\n                        {loading ? (\r\n                            <div>\r\n                                loading\r\n                                <Spinner pl={3} ml=\"auto\" display=\"flex\" />\r\n                            </div>\r\n                        ) : searchResult ? (\r\n                            searchResult.slice(0, 4).map((user) => (\r\n                                <UserListItem\r\n                                    key={user._id}\r\n                                    user={user}\r\n                                    handleFunction={() => {\r\n                                        handleGroup(user);\r\n                                    }}\r\n                                />\r\n                            ))\r\n                        ) : null}\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"blue\" onClick={handleSubmit}>\r\n                            Create Chat\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Button, Stack, Text, useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./Miscellaneous/GroupChatModal\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n    const { selectedChat, setSelectedChat, userInfo, chats, setChats } =\r\n        ChatState();\r\n    const [loggedUser, setLoggedUser] = useState();\r\n    const toast = useToast();\r\n\r\n    useEffect(() => {\r\n        setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")).data.user);\r\n\r\n        const fetchChats = async () => {\r\n            try {\r\n                const config = {\r\n                    headers: {\r\n                        Authorization: `Bearer ${userInfo.token}`,\r\n                    },\r\n                };\r\n                const { data } = await axios.get(\"/api/chat\", config);\r\n                setChats(data);\r\n                // console.log(data);\r\n            } catch (error) {\r\n                toast({\r\n                    title: \"Error Occurred!\",\r\n                    status: \"error\",\r\n                    description: \"Failed to Load Chats\",\r\n                    duration: 5000,\r\n                    isClosable: true,\r\n                    position: \"bottom\",\r\n                });\r\n            }\r\n        };\r\n\r\n        fetchChats();\r\n    }, [fetchAgain, userInfo, toast, setChats]);\r\n\r\n    return (\r\n        <Box\r\n            display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            p={3}\r\n            bg=\"white\"\r\n            w={{ base: \"100%\", md: \"31%\" }}\r\n            borderRadius=\"lg\"\r\n            borderWidth=\"1px\"\r\n        >\r\n            <Box\r\n                pb={3}\r\n                px={3}\r\n                fontSize={{ base: \"28px\", md: \"30px\" }}\r\n                fontFamily=\"Work sans\"\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n                w=\"100%\"\r\n            >\r\n                My Chats\r\n                <GroupChatModal>\r\n                    <Button\r\n                        display=\"flex\"\r\n                        fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n                        rightIcon={<AddIcon />}\r\n                    >\r\n                        Create New Chat\r\n                    </Button>\r\n                </GroupChatModal>\r\n            </Box>\r\n            <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                p={3}\r\n                bg=\"#F8F8F8\"\r\n                w=\"100%\"\r\n                h=\"93%\"\r\n                borderRadius=\"lg\"\r\n                overflowY=\"hidden\"\r\n            >\r\n                {chats ? (\r\n                    <Stack overflowY=\"scroll\">\r\n                        {chats.map((chat) => (\r\n                            <Box\r\n                                onClick={() => setSelectedChat(chat)}\r\n                                cursor=\"pointer\"\r\n                                bg={\r\n                                    selectedChat === chat\r\n                                        ? \"#38B2AC\"\r\n                                        : \"#E8E8E8\"\r\n                                }\r\n                                color={\r\n                                    selectedChat === chat ? \"white\" : \"black\"\r\n                                }\r\n                                px={3}\r\n                                py={2}\r\n                                borderRadius=\"lg\"\r\n                                key={chat._id}\r\n                            >\r\n                                <Text>\r\n                                    {!chat.isGroupChat\r\n                                        ? getSender(loggedUser, chat.users)\r\n                                        : chat.chatName}\r\n                                </Text>\r\n                            </Box>\r\n                        ))}\r\n                    </Stack>\r\n                ) : (\r\n                    <ChatLoading />\r\n                )}\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MyChats;\r\n","import {\r\n    Avatar,\r\n    Box,\r\n    Button,\r\n    Drawer,\r\n    DrawerBody,\r\n    DrawerContent,\r\n    DrawerHeader,\r\n    DrawerOverlay,\r\n    Input,\r\n    Menu,\r\n    MenuButton,\r\n    MenuDivider,\r\n    MenuItem,\r\n    MenuList,\r\n    Text,\r\n    useToast,\r\n    Tooltip,\r\n    useDisclosure,\r\n    Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { BellIcon, ChevronDownIcon, Search2Icon } from \"@chakra-ui/icons\";\r\nimport React from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\n// import { Effect } from \"react-notification-badge\";\r\n// import NotificationBadge from \"react-notification-badge/lib/components/NotificationBadge\";\r\n\r\nconst SideDrawer = () => {\r\n    const [search, setSearch] = React.useState(\"\");\r\n    const [searchResult, setSearchResult] = React.useState([]);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [loadingChat, setLoadingChat] = React.useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n    const {\r\n        userInfo,\r\n        setSelectedChat,\r\n        chats,\r\n        setChats,\r\n        notification,\r\n        setNotification,\r\n    } = ChatState();\r\n    const userData = userInfo.data.user;\r\n\r\n    const navigate = useNavigate();\r\n    const toast = useToast();\r\n\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem(\"userInfo\");\r\n        navigate(\"/\");\r\n    };\r\n\r\n    const handleSearch = async (e) => {\r\n        setSearch(e.target.value);\r\n        if (!search && !e.target.value) {\r\n            toast({\r\n                title: \"Please enter a search query\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n            return;\r\n        }\r\n        try {\r\n            setLoading(true);\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.get(\r\n                `/api/user?search=${search}`,\r\n                config\r\n            );\r\n            setLoading(false);\r\n            setSearchResult(data);\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Load Search Results\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n\r\n    const accessChat = async (userId) => {\r\n        try {\r\n            setLoadingChat(true);\r\n            const config = {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                    Authorization: `Bearer ${userInfo.token}`,\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.post(\"/api/chat\", { userId }, config);\r\n\r\n            if (!chats.find((chat) => chat._id === data._id)) {\r\n                setChats([data, ...chats]);\r\n            }\r\n\r\n            setSelectedChat(data);\r\n            setLoadingChat(false);\r\n            onClose();\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Occured!\",\r\n                description: error.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n                bg=\"white\"\r\n                w=\"100%\"\r\n                p=\"5px 10px 5px 10px\"\r\n                borderWidth=\"5px\"\r\n            >\r\n                <Tooltip\r\n                    label=\"Search Users to Chat\"\r\n                    hasArrow\r\n                    placement=\"bottom-end\"\r\n                >\r\n                    <Button variant=\"ghost\" onClick={onOpen}>\r\n                        <Search2Icon />\r\n                        <Text display={{ base: \"none\", md: \"flex\" }} px=\"4\">\r\n                            Search Users\r\n                        </Text>\r\n                    </Button>\r\n                </Tooltip>\r\n\r\n                <Text\r\n                    fontSize=\"2xl\"\r\n                    fontFamily=\"Work sans\"\r\n                    fontWeight={\"extrabold\"}\r\n                >\r\n                    Hay-Boi\r\n                </Text>\r\n                <div>\r\n                    <Menu>\r\n                        <MenuButton p={1}>\r\n                            {/* <NotificationBadge\r\n                                count={notification.length}\r\n                                effect={Effect.SCALE}\r\n                            /> */}\r\n                            <BellIcon fontSize=\"2xl\" m={1} />\r\n                        </MenuButton>\r\n                        <MenuList pl={2}>\r\n                            {!notification.length && \"No New Messages\"}\r\n                            {notification.map((notif) => (\r\n                                <MenuItem\r\n                                    key={notif._id}\r\n                                    onClick={() => {\r\n                                        setSelectedChat(notif.chat);\r\n                                        setNotification(\r\n                                            notification.filter(\r\n                                                (n) => n !== notif\r\n                                            )\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    {notif.chat.isGroupChat\r\n                                        ? `New Message in ${notif.chat.chatName}`\r\n                                        : `New Message from ${getSender(\r\n                                              userInfo.data.user,\r\n                                              notif.chat.users\r\n                                          )}`}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </MenuList>\r\n                    </Menu>\r\n                    <Menu>\r\n                        <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\r\n                            <Avatar\r\n                                size=\"sm\"\r\n                                cursor=\"pointer\"\r\n                                name={userData.name}\r\n                                src={userData.pic}\r\n                            />\r\n                        </MenuButton>\r\n                        <MenuList>\r\n                            <ProfileModal user={userData}>\r\n                                <MenuItem>My Profile</MenuItem>\r\n                                {\"\"}\r\n                            </ProfileModal>\r\n                            <MenuDivider />\r\n                            <MenuItem onClick={logoutHandler}>Log Out</MenuItem>\r\n                        </MenuList>\r\n                    </Menu>\r\n                </div>\r\n            </Box>\r\n\r\n            <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n                <DrawerOverlay>\r\n                    <DrawerContent>\r\n                        <DrawerHeader borderBottomWidth={\"1px\"}>\r\n                            Search Users\r\n                        </DrawerHeader>\r\n                        <DrawerBody>\r\n                            <Box display={\"flex\"} pb={2}>\r\n                                <Input\r\n                                    placeholder=\"Search by Name or Email\"\r\n                                    mr={2}\r\n                                    value={search}\r\n                                    onChange={(e) => {\r\n                                        handleSearch(e);\r\n                                    }}\r\n                                />\r\n                                <Button onClick={handleSearch}>Go</Button>\r\n                            </Box>\r\n                            {loading ? (\r\n                                <ChatLoading />\r\n                            ) : searchResult ? (\r\n                                searchResult.map((user) => (\r\n                                    <UserListItem\r\n                                        key={user._id}\r\n                                        user={user}\r\n                                        handleFunction={() =>\r\n                                            accessChat(user._id)\r\n                                        }\r\n                                    />\r\n                                ))\r\n                            ) : null}\r\n                            {loadingChat && (\r\n                                <Spinner ml=\"auto\" display=\"flex\" />\r\n                            )}\r\n                        </DrawerBody>\r\n                    </DrawerContent>\r\n                </DrawerOverlay>\r\n            </Drawer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport ChatBox from \"../Components/ChatBox\";\r\nimport MyChats from \"../Components/MyChats\";\r\nimport SideDrawer from \"../Components/Miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport React from \"react\";\r\n\r\nconst ChatPage = () => {\r\n    const [fetchAgain, setFetchAgain] = useState(false);\r\n    const { userInfo } = ChatState();\r\n    const user = userInfo ? userInfo.data.user : null;\r\n\r\n    return (\r\n        <div style={{ width: \"100%\" }}>\r\n            {user && <SideDrawer />}\r\n            <Box\r\n                display=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                w=\"100%\"\r\n                h=\"91.5vh\"\r\n                p=\"10px\"\r\n            >\r\n                {user && <MyChats fetchAgain={fetchAgain} />}\r\n                {user && (\r\n                    <ChatBox\r\n                        fetchAgain={fetchAgain}\r\n                        setFetchAgain={setFetchAgain}\r\n                    />\r\n                )}\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport ChatPage from \"./Pages/ChatPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Routes>\r\n                <Route path=\"/\" element={<Homepage />} />\r\n                <Route path=\"/chats\" element={<ChatPage />} />\r\n            </Routes>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ChatProvider from \"./Context/ChatProvider\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n    <ChakraProvider>\n        <BrowserRouter>\n            <ChatProvider>\n                <App />\n            </ChatProvider>\n        </BrowserRouter>\n    </ChakraProvider>\n);\n"],"sourceRoot":""}